docker-compose.yml

version: '3.8'

services:
  # PostgreSQL services remain unchanged
  postgres:
    container_name: postgres
    image: postgres:17.0
    environment:
      POSTGRES_USER: am2k
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@email.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  # MongoDB Config Servers
  cfgsvr1:
    container_name: cfgsvr1
    image: mongo:8.0
    command: mongod --configsvr --replSet cfgrs --port 27017
    volumes:
      - cfgsvr1:/data/db
    networks:
      - mongo
    restart: unless-stopped

  cfgsvr2:
    container_name: cfgsvr2
    image: mongo:8.0
    command: mongod --configsvr --replSet cfgrs --port 27017
    volumes:
      - cfgsvr2:/data/db
    networks:
      - mongo
    restart: unless-stopped

  cfgsvr3:
    container_name: cfgsvr3
    image: mongo:8.0
    command: mongod --configsvr --replSet cfgrs --port 27017
    volumes:
      - cfgsvr3:/data/db
    networks:
      - mongo
    restart: unless-stopped

  # MongoDB Shard Servers
  shard1:
    container_name: shard1
    image: mongo:8.0
    command: mongod --shardsvr --replSet shard1rs --port 27017
    volumes:
      - shard1:/data/db
    networks:
      - mongo
    restart: unless-stopped

  shard2:
    container_name: shard2
    image: mongo:8.0
    command: mongod --shardsvr --replSet shard2rs --port 27017
    volumes:
      - shard2:/data/db
    networks:
      - mongo
    restart: unless-stopped

  shard3:
    container_name: shard3
    image: mongo:8.0
    command: mongod --shardsvr --replSet shard3rs --port 27017
    volumes:
      - shard3:/data/db
    networks:
      - mongo
    restart: unless-stopped

  # MongoDB Router (mongos)
  mongos:
    container_name: mongos
    image: mongo:8.0
    command: mongos --configdb cfgrs/cfgsvr1:27017,cfgsvr2:27017,cfgsvr3:27017 --bind_ip_all
    ports:
      - "27017:27017"
    depends_on:
      - cfgsvr1
      - cfgsvr2
      - cfgsvr3
      - shard1
      - shard2
      - shard3
    networks:
      - mongo
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  mongo:
    driver: bridge
    external: true

volumes:
  postgres:
  pgadmin:
  postgres_fraud:
  mongodb:
  cfgsvr1:
  cfgsvr2:
  cfgsvr3:
  shard1:
  shard2:
  shard3:

Steps

1.
# Connect to cfgsvr1
docker exec -it cfgsvr1 mongosh

# Initialize the config server replica set
rs.initiate({
  _id: "cfgrs",
  configsvr: true,
  members: [
    { _id: 0, host: "cfgsvr1:27017" },
    { _id: 1, host: "cfgsvr2:27017" },
    { _id: 2, host: "cfgsvr3:27017" }
  ]
})


2.
# For shard1
docker exec -it shard1 mongosh
rs.initiate({
  _id: "shard1rs",
  members: [
    { _id: 0, host: "shard1:27017" }
  ]
})

# For shard2
docker exec -it shard2 mongosh
rs.initiate({
  _id: "shard2rs",
  members: [
    { _id: 0, host: "shard2:27017" }
  ]
})

# For shard3
docker exec -it shard3 mongosh
rs.initiate({
  _id: "shard3rs",
  members: [
    { _id: 0, host: "shard3:27017" }
  ]
})

3.
# Connect to mongos
docker exec -it mongos mongosh

# Add the shards
sh.addShard("shard1rs/shard1:27017")
sh.addShard("shard2rs/shard2:27017")
sh.addShard("shard3rs/shard3:27017")

4.
# Enable sharding for your database
use database-testing-sharding
sh.enableSharding("database-testing-sharding")

# Create a sharding key index on your collection
db.address.createIndex({ "city": "hashed" })

# Shard the collection
sh.shardCollection("database-testing-sharding.address", { "city": "hashed" })

5.
#Set sharding on 100mb

use config
db.settings.update(
  { _id: "chunksize" },
  { $set: { value: 100 } } // Chunk sizes set to 100 MB
)

java -Xms512m -Xmx8g -jar ./target/database-testing-0.0.1-SNAPSHOT.jar
