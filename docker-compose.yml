##version: '3.8'
##
#services:
#  # PostgreSQL Service
#  postgres:
#    container_name: postgres
#    image: postgres:17.0
#    environment:
#      POSTGRES_USER: am2k
#      POSTGRES_PASSWORD: password
#      PGDATA: /data/postgres
#    volumes:
#      - postgres:/data/postgres
#    ports:
#      - "5432:5432"
#    networks:
#      - postgres
#    restart: unless-stopped
#
#  # pgAdmin Service
#  pgadmin:
#    container_name: pgadmin
#    image: dpage/pgadmin4
#    environment:
#      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@email.com}
#      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
#      PGADMIN_CONFIG_SERVER_MODE: 'False'
#    volumes:
#      - pgadmin:/var/lib/pgadmin
#    ports:
#      - "5050:80"
#    networks:
#      - postgres
#    restart: unless-stopped
#
#  # MongoDB Service
#  mongodb:
#    container_name: mongodb
#    image: mongo:8.0
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongodb:/data/db
#    networks:
#      - mongo
#    restart: unless-stopped
#
#networks:
#  postgres:
#    driver: bridge
#  mongo:
#    driver: bridge
#
#volumes:
#  postgres:
#  pgadmin:
#  postgres_fraud:
#  mongodb:

#
services:
  # PostgreSQL services remain unchanged
  postgres:
    container_name: postgres
    image: postgres:17.0
    environment:
      POSTGRES_USER: am2k
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@email.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  # MongoDB Config Servers
  cfgsvr1:
    container_name: cfgsvr1
    image: mongo:8.0
    command: mongod --configsvr --replSet cfgrs --port 27017
    volumes:
      - cfgsvr1:/data/db
    networks:
      - mongo
    restart: unless-stopped

  cfgsvr2:
    container_name: cfgsvr2
    image: mongo:8.0
    command: mongod --configsvr --replSet cfgrs --port 27017
    volumes:
      - cfgsvr2:/data/db
    networks:
      - mongo
    restart: unless-stopped

  cfgsvr3:
    container_name: cfgsvr3
    image: mongo:8.0
    command: mongod --configsvr --replSet cfgrs --port 27017
    volumes:
      - cfgsvr3:/data/db
    networks:
      - mongo
    restart: unless-stopped

  # MongoDB Shard Servers
  shard1:
    container_name: shard1
    image: mongo:8.0
    command: mongod --shardsvr --replSet shard1rs --port 27017
    volumes:
      - shard1:/data/db
    networks:
      - mongo
    restart: unless-stopped

  shard2:
    container_name: shard2
    image: mongo:8.0
    command: mongod --shardsvr --replSet shard2rs --port 27017
    volumes:
      - shard2:/data/db
    networks:
      - mongo
    restart: unless-stopped

  shard3:
    container_name: shard3
    image: mongo:8.0
    command: mongod --shardsvr --replSet shard3rs --port 27017
    volumes:
      - shard3:/data/db
    networks:
      - mongo
    restart: unless-stopped

  # MongoDB Router (mongos)
  mongos:
    container_name: mongos
    image: mongo:8.0
    command: mongos --configdb cfgrs/cfgsvr1:27017,cfgsvr2:27017,cfgsvr3:27017 --bind_ip_all
    ports:
      - "27017:27017"
    depends_on:
      - cfgsvr1
      - cfgsvr2
      - cfgsvr3
      - shard1
      - shard2
      - shard3
    networks:
      - mongo
    restart: unless-stopped

networks:
  postgres:
    driver: bridge
  mongo:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  postgres_fraud:
  mongodb:
  cfgsvr1:
  cfgsvr2:
  cfgsvr3:
  shard1:
  shard2:
  shard3: